-- SQL CASE STUDY 
SELECT * from fact;
SELECT * from Location;
SELECT * from Product;


--1) Display number of states present in location table?
SELECT COUNT(DISTINCT State) FROM Location

--2) How many products are of regular type ?
select count(*) from product 
where type = 'regular'

--3) How much spending has been done on marketing of product id 1
select sum(cast(marketing as decimal)) from fact
where ProductId = 1

--4) What is the minimum sales of a product ?
select min(Sales) from fact;

--5) Display max Cost of Good Sold(COGS).
select max(cogs) as max_cost from fact;

--6) Display the Details of the productid where product type is coffee
select * from Product
where Product_Type = 'coffee'

--7) Display the details where total_expenses is greater than 40.
select * from fact
where Total_Expenses > 40

--8) What is average sals in area_code 719 ?
select avg(Sales) as Avg_sales from fact
where Area_Code = 719

--9) Find out the total profit generated by Colorado state.
SELECT sum(cast(Profit as decimal)) as total_profit
FROM Fact f
JOIN Location l ON f.Area_Code =l.Area_Code
WHERE l.State = 'Colorado'

--10) Display the average inventory for each product id.
SELECT ProductID, AVG(Inventory) AS AvgInventory
FROM Fact
GROUP BY ProductID
order by ProductId;

--11) Display state in a sequential order in a location table.
SELECT State FROM Location
ORDER BY State

--12) Display the average budget margin where average budget margin should be greater than100 
SELECT AVG(Budget_Margin) AS AvgBudgetMargin
FROM Fact
GROUP BY ProductID
HAVING AVG(Budget_Margin) > 100

--13) What is the total sales done on date 2010-01-01
SELECT SUM(Sales) AS TotalSales
FROM Fact
WHERE CONVERT(date, Date, 101) = '2010-01-01'

--14) Display the average total expense of each product id on individual date
SELECT ProductID, CONVERT(date, Date, 101) AS ExpenseDate, AVG(Total_Expenses) AS AvgTotalExpenses
FROM Fact
GROUP BY ProductID, CONVERT(date, Date, 101)

--15) Display the table with the following attributes such as Date, productid, product_type, product, Sales, profit, state, area_code
SELECT f.Date, f.ProductID, p.Product_Type ,P.Product, f.Sales, f.Profit, l.State, l.Area_Code
FROM Fact f
JOIN Product p ON f.ProductID = p.ProductID
JOIN Location l ON f.Area_Code = l.Area_Code

--16) Display the rank without any gap to show the Sales wise rank. 
SELECT RANK() OVER (ORDER BY Sales DESC) AS SalesRank, *
FROM Fact

--17) Find the State wise Profit and Sales.
select State,sum(cast(Sales as decimal)) as sales,sum(cast(profit as decimal)) as profit from fact f
join Location l
on f.Area_Code = l.Area_Code
group by l.State

--18) Find the State wise Profit and Sales along with the Product Name.
select State,Product,sum(cast(Sales as decimal)) as sales,sum(cast(profit as decimal)) as profit from fact f
join Location l
on f.Area_Code = l.Area_Code
join Product p
on f.ProductId = p.ProductId
group by l.State,product

--19) If there is an increase in sales of 5%. Calculate the increased sales.
SELECT Sales,Sales * 1.05 AS IncreasedSales
FROM Fact

--20) Find the maximum profit along with the Product id and Product Type. 
SELECT TOP 1 f.ProductID, p.Product_Type, MAX(f.Profit) AS MaxProfit
FROM Fact f
JOIN Product p ON f.ProductID = p.ProductID
GROUP BY f.ProductID, p.Product_Type
ORDER BY MaxProfit DESC


--21) Create a Stored Procedure to fetch the result according to the product type fromProduct
CREATE PROCEDURE 
Fetch_Products_By_Type @productType NVARCHAR(50)
AS
BEGIN
    SELECT *
    FROM Product
    WHERE Product_Type = @productType
END

--22) Write a query by creating a condition in which if the total expenses is less than 60 thenit isaprofit or else loss.
SELECT 
    *,
    CASE
        WHEN Total_Expenses < 60 THEN 'Profit'
        ELSE 'Loss'
    END AS [Profit or Loss]
FROM 
    Fact


--23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull thedata in hierarchical order. 
SELECT 
    CAST(Date AS DATE) AS Week_Starting,
    ProductID,
    SUM(Sales) AS Total_Sales
FROM 
    Fact
GROUP BY 
    CAST(Date AS DATE),
    ProductID
WITH ROLLUP

--24) Apply union and intersection operator on the tables which consist of attribute area code. 
SELECT Area_Code FROM Location
UNION
SELECT Area_Code FROM Fact

SELECT Area_Code FROM Location
INTERSECT
SELECT Area_Code FROM Fact

--25) Create a user-defined function for the product table to fetch a particular product typebasedupon the user’s preference.
CREATE PROCEDURE GetProductsOfType
    @productType NVARCHAR(50)
AS
BEGIN
    SELECT *
    FROM Product
    WHERE Product_Type = @productType
END


--26) Change the product type from coffee to tea where product id is 1 and undo it.
BEGIN TRANSACTION
UPDATE Product SET Product_Type = 'tea' WHERE ProductId = 1;
UPDATE Product SET Product_Type = 'coffee' WHERE ProductId = 1;
COMMIT TRANSACTION

--27) Display the Date, productid and sales where total expenses are between 100 to 200.
SELECT Date, ProductID, Sales 
FROM Fact 
WHERE Total_Expenses BETWEEN 100 AND 200
ORDER BY Date asc;

--28) Delete the records in the product table for regular type. 
DELETE FROM Product
WHERE Type = 'regular'

--29) Display the ASCII value of the fifth character from the column product
SELECT ASCII(SUBSTRING(product, 5, 1)) AS ascii_value
FROM Product;
